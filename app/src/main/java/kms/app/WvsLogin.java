/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kms.app;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.FixedRecvByteBufAllocator;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import kms.network.ChannelDecoder;
import kms.network.ChannelEncoder;
import kms.network.handler.NettyHandler;

public class WvsLogin {
    private static WvsLogin instance = new WvsLogin();
    private ServerBootstrap bootstrap;
    //private ConnectorClientStorage clients;

    public static WvsLogin getInstance() {
        return instance;
    }

    public void launchServer() {
        EventLoopGroup bossGroup = new NioEventLoopGroup();
        EventLoopGroup workerGroup = new NioEventLoopGroup();
        try {
            bootstrap = new ServerBootstrap();
            bootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(new ChannelInitializer<SocketChannel>() {
                @Override
                public void initChannel(SocketChannel ch) throws Exception {
                    ch.pipeline().addLast("decodeer", new ChannelDecoder());
                    ch.pipeline().addLast("encodeer", new ChannelEncoder());
                    //ch.pipeline().addLast("idleStateHandler", new IdleStateHandler(30, 10, 0));
                    ch.pipeline().addLast("handler", new NettyHandler());
                    ch.config().setRecvByteBufAllocator(new FixedRecvByteBufAllocator(0xFFFF));
                    ch.config().setOption(ChannelOption.SO_RCVBUF, 0xFFFF); // 채널 수신 버퍼 크기 (0xFFFF)
                }
            }).option(ChannelOption.SO_BACKLOG, 128)
                    .option(ChannelOption.SO_RCVBUF, 0xFFFF)
                    .option(ChannelOption.RCVBUF_ALLOCATOR, new FixedRecvByteBufAllocator(0xFFFF))
                    .childOption(ChannelOption.SO_KEEPALIVE, true);
            ChannelFuture cf = bootstrap.bind(8120).sync();

            System.out.println("중앙 서버 개방 성공하였습니다.");
        } catch (InterruptedException ex) {
            System.err.println("중앙서버 개방에 실패하였습니다.\r\n" + ex);
        }

    }
}
